/* === Overlay & Animation === */
.portalBackdrop,
.backdrop {
  position: fixed;
  inset: 0;
  background: rgba(0, 0, 0, 0.4);
  z-index: 999;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translate(-50%, -46%);
  }
  to {
    opacity: 1;
    transform: translate(-50%, -50%);
  }
}

/* === Modal Window === */
.abilityDropdownGrid {
  animation: fadeIn 0.2s ease-out;
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 68%; /* compact width */
  max-width: 860px;
  max-height: 80vh;
  overflow-y: auto;
  background: #fff;
  border-radius: 10px;
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.25);
  padding: 16px;
  z-index: 1000;
}

/* === Header === */
.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 10px;
}

.header h2 {
  font-size: 15px;
  font-weight: 600;
  margin: 0;
}

.closeBtn {
  background: transparent;
  border: none;
  font-size: 18px;
  cursor: pointer;
  color: #666;
}

/* === Catalog Layout === */
.catalogRow {
  display: grid;
  grid-template-columns: repeat(6, 1fr);
  gap: 8px;
}

.catalogColumn {
  border-radius: 8px;
  padding: 6px 4px 10px;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 4px;
  min-width: 0;
}

.catalogHeader {
  font-weight: 700;
  font-size: 12px;
  margin-bottom: 4px;
  text-align: center;
  color: #333;
  border-bottom: 2px solid rgba(0, 0, 0, 0.1);
  width: 80%;
  padding-bottom: 2px;
}

/* === Ability Cards === */
.abilityOptionCard {
  display: flex;
  flex-direction: column;
  align-items: center;
  border: 1px solid #ccc;
  border-radius: 6px;
  padding: 4px;
  background: #fafafa;
  width: 82%;
  max-width: 95px;
  text-align: center;
  cursor: pointer;
  transition: transform 0.1s, box-shadow 0.1s;
  box-sizing: border-box;
}

.abilityOptionCard:hover {
  background: var(--ability-hover, #f5f5f5);
  transform: scale(1.02);
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.15);
}

/* === Disabled State === */
.invalidLevel {
  opacity: 0.45;
  filter: grayscale(100%);
  pointer-events: none;
}

/* === Centered Icon + Level === */
.iconRow,
.iconCenter {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 3px;
}

.abilityIconLarge {
  border-radius: 4px;
  width: 22px;
  height: 22px;
}

.levelNumber {
  font-size: 11px;
  font-weight: 700;
}

.lowLevel {
  color: #d9534f; /* red for â‰¤9 */
}

.highLevel {
  color: #333; /* dark for 10 */
}

/* === Text === */
.abilityText {
  display: flex;
  flex-direction: column;
  align-items: center;
  line-height: 1.1;
  margin-top: 3px;
}

.abilityName {
  font-size: 10.5px;
  font-weight: 600;
  color: #333;
}

/* === States === */
.grayedOut {
  opacity: 0.6;
  filter: grayscale(100%);
}
/* === Selected Check Mark === */
.checkMark {
  position: absolute;
  top: 2px;
  right: 4px;
  font-size: 12px;
  font-weight: bold;
  color: #28a745; /* green check */
  background: rgba(255, 255, 255, 0.8);
  border-radius: 50%;
  width: 16px;
  height: 16px;
  display: flex;
  justify-content: center;
  align-items: center;
  box-shadow: 0 0 2px rgba(0, 0, 0, 0.2);
}

/* Ensure card can host absolute overlay */
.abilityOptionCard {
  position: relative;
}
/* Selected check mark */
.checkMark {
  position: absolute;
  top: 2px;
  right: 4px;
  font-size: 12px;
  font-weight: bold;
  color: #28a745;
  background: rgba(255, 255, 255, 0.85);
  border-radius: 50%;
  width: 16px;
  height: 16px;
  display: flex;
  justify-content: center;
  align-items: center;
  box-shadow: 0 0 2px rgba(0, 0, 0, 0.2);
}

.abilityOptionCard {
  position: relative;
}
/* === Selected circular check badge === */
.checkMark {
  position: absolute;
  top: 4px;
  right: 4px;
  width: 16px;
  height: 16px;
  border-radius: 50%;
  background: #28a745; /* solid green */
  color: white;
  font-size: 11px;
  font-weight: 700;
  display: flex;
  justify-content: center;
  align-items: center;
  box-shadow: 0 0 2px rgba(0, 0, 0, 0.2);
}

/* ability cards must allow absolute positioning */
.abilityOptionCard {
  position: relative;
}

/* remove all gray-out visual effects */
.grayedOut {
  opacity: 1 !important;
  filter: none !important;
}
